// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"
	"github.com/your-org/boilerplate-go/internal/config"
	"github.com/your-org/boilerplate-go/internal/server"
	"github.com/your-org/boilerplate-go/pkg/telemetry"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// InitializeApplication initializes the complete application with all dependencies
func InitializeApplication(ctx context.Context) (*Application, error) {
	config, err := ProvideConfig()
	if err != nil {
		return nil, err
	}
	db, err := ProvideDatabase(config)
	if err != nil {
		return nil, err
	}
	logger := ProvideLogger(config)
	zerologLogger := ProvideZerologLogger(logger)
	userRepository := ProvideUserRepository(db)
	userService := ProvideUserService(userRepository)
	userController := ProvideUserController(userService, zerologLogger)
	server := ProvideServer(config, db, zerologLogger, userController)
	v := ProvideTelemetryCleanup(ctx, config)
	application := &Application{
		Server:           server,
		Config:           config,
		CleanupTelemetry: v,
	}
	return application, nil
}

// InitializeDatabase initializes only the database connection
func InitializeDatabase() (*gorm.DB, error) {
	config, err := ProvideConfig()
	if err != nil {
		return nil, err
	}
	db, err := ProvideDatabase(config)
	if err != nil {
		return nil, err
	}
	return db, nil
}

// InitializeDatabaseWithConfig initializes database with provided config
func InitializeDatabaseWithConfig(cfg *config.Config) (*gorm.DB, error) {
	db, err := ProvideDatabase(cfg)
	if err != nil {
		return nil, err
	}
	return db, nil
}

// wire.go:

// Application represents the complete application with all dependencies
type Application struct {
	Server           *server.Server
	Config           *config.Config
	CleanupTelemetry func()
}

// ProvideTelemetryCleanup provides telemetry cleanup function
func ProvideTelemetryCleanup(ctx context.Context, cfg *config.Config) func() {
	if cfg.Telemetry.Enabled {
		return telemetry.InitTelemetry(ctx, cfg)
	}
	return func() {}
}
